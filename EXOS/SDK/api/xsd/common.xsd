<!--

*

*  Copyright (c) Extreme Networks Inc.  2005,2006

*  All rights reserved 

*

-->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.extremenetworks.com/XMLSchema/xos/common" xmlns="http://www.extremenetworks.com/XMLSchema/xos/common" targetNamespace="http://www.extremenetworks.com/XMLSchema/xos/common" version="A.B.C.D">
	<xsd:attributeGroup name="VersionAttributeGroup">
		<xsd:attribute name="EXOSMajorVersion" type="xsd:unsignedInt" use="required"/>
		<xsd:attribute name="MajorVersion" type="xsd:unsignedInt" use="required"/>
		<xsd:attribute name="MinorVersion" type="xsd:unsignedInt" use="required"/>
		<xsd:attribute name="ReleaseNumber" type="xsd:unsignedInt" use="required"/>
	</xsd:attributeGroup>
	<xsd:simpleType name="StringLen16">
		<xsd:annotation>
			<xsd:documentation>
			String with a maximum length of 16 characters.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:minLength value="0"/>
			<xsd:maxLength value="16"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="StringLen8">
		<xsd:annotation>
			<xsd:documentation>
			String with a maximum length of 8 characters.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:minLength value="0"/>
			<xsd:maxLength value="8"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="StringLen64">
		<xsd:annotation>
			<xsd:documentation>
			String with a maximum length of 64 characters.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:minLength value="0"/>
			<xsd:maxLength value="64"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="StringLen128">
		<xsd:annotation>
			<xsd:documentation>
			String with a maximum length of 128 characters.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:minLength value="0"/>
			<xsd:maxLength value="128"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="StringLen256">
		<xsd:annotation>
			<xsd:documentation>
			String with a maximum length of 256 characters.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:minLength value="0"/>
			<xsd:maxLength value="256"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="StringLen32">
		<xsd:annotation>
			<xsd:documentation>
			String with a maximum length of 32 characters.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:minLength value="0"/>
			<xsd:maxLength value="32"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="StringLen2K">
		<xsd:annotation>
			<xsd:documentation>
			String with a maximum length of 2048 characters.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:minLength value="0"/>
			<xsd:maxLength value="2048"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="StringLen1K">
		<xsd:annotation>
			<xsd:documentation>
			String with a maximum length of 1024 characters.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:minLength value="0"/>
			<xsd:maxLength value="1024"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="StringLen4K">
		<xsd:annotation>
			<xsd:documentation>
			String with a maximum length of 4096 characters.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:minLength value="0"/>
			<xsd:maxLength value="4096"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="StringLen8K">
		<xsd:annotation>
			<xsd:documentation>
			String with a maximum length of 8193 characters.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:minLength value="0"/>
			<xsd:maxLength value="8193"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="TrueFalse">
		<xsd:annotation>
			<xsd:documentation>
			Enumeration for true/false values.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="unknown"/>
			<xsd:enumeration value="true"/>
			<xsd:enumeration value="false"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="IncludeExcludes">
		<xsd:annotation>
			<xsd:documentation>
			Enumeration for include/exclude values.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="unknown"/>
			<xsd:enumeration value="include"/>
			<xsd:enumeration value="exclude"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="NodeRoles">
		<xsd:annotation>
			<xsd:documentation>
			Enumeration for node roles.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="unknown"/>
			<xsd:enumeration value="Master"/>
			<xsd:enumeration value="Backup"/>
			<xsd:enumeration value="Standby"/>
			<xsd:enumeration value="na"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="LicenseLevel">
		<xsd:annotation>
			<xsd:documentation>
			Enumeration for license levels.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="unknown"/>
			<xsd:enumeration value="Edge"/>
			<xsd:enumeration value="AdvancedEdge"/>
			<xsd:enumeration value="Core"/>
			<xsd:enumeration value="AdvancedCore"/>
			<xsd:enumeration value="na"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="NodeStates">
		<xsd:annotation>
			<xsd:documentation>
			Enumeration for node states.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="unknown"/>
			<xsd:enumeration value="Disabled"/>
			<xsd:enumeration value="Failed"/>
			<xsd:enumeration value="Overflow"/>
			<xsd:enumeration value="Listening"/>
			<xsd:enumeration value="Stabilizing"/>
			<xsd:enumeration value="Waiting"/>
			<xsd:enumeration value="Active"/>
			<xsd:enumeration value="na"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="SSHStates">
		<xsd:annotation>
			<xsd:documentation>
			Enumeration for SSH states.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="unknown"/>
			<xsd:enumeration value="notInstalled"/>
			<xsd:enumeration value="enabled"/>
			<xsd:enumeration value="disabled"/>
			<xsd:enumeration value="na"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="TelnetStates">
		<xsd:annotation>
			<xsd:documentation>
			Enumeration for Telnet states.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="unknown"/>
			<xsd:enumeration value="enabled"/>
			<xsd:enumeration value="disabled"/>
			<xsd:enumeration value="na"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="YesNo">
		<xsd:annotation>
			<xsd:documentation>
			Enumeration for yes/no values.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="unknown"/>
			<xsd:enumeration value="yes"/>
			<xsd:enumeration value="no"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="ActiveStates">
		<xsd:annotation>
			<xsd:documentation>
			Enumeration for active/inactive states.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="unknown"/>
			<xsd:enumeration value="Active"/>
			<xsd:enumeration value="Inactive"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="BlockedStates">
		<xsd:annotation>
			<xsd:documentation>
			Enumeration for blocked/non-blocked states.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="unknown"/>
			<xsd:enumeration value="Blocked"/>
			<xsd:enumeration value="NonBlocked"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="uint8_t">
		<xsd:annotation>
			<xsd:documentation>
			Unsigned 8-bit integer.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:unsignedByte"/>
	</xsd:simpleType>
	<xsd:simpleType name="uint16_t">
		<xsd:annotation>
			<xsd:documentation>
			Unsigned 16-bit integer.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:unsignedShort"/>
	</xsd:simpleType>
	<xsd:simpleType name="uint32_t">
		<xsd:annotation>
			<xsd:documentation>
			Unsigned 32-bit integer.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:unsignedInt"/>
	</xsd:simpleType>
	<xsd:simpleType name="uint64_t">
		<xsd:annotation>
			<xsd:documentation>
			Unsigned 64-bit integer.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:unsignedLong"/>
	</xsd:simpleType>
	<xsd:simpleType name="int8_t">
		<xsd:annotation>
			<xsd:documentation>
			Signed 8-bit integer.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:byte"/>
	</xsd:simpleType>
	<xsd:simpleType name="int16_t">
		<xsd:annotation>
			<xsd:documentation>
			Signed 16-bit integer.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:short"/>
	</xsd:simpleType>
	<xsd:simpleType name="int32_t">
		<xsd:annotation>
			<xsd:documentation>
			Signed 32-bit integer.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:int"/>
	</xsd:simpleType>
	<xsd:simpleType name="int64_t">
		<xsd:annotation>
			<xsd:documentation>
			Signed 64-bit integer.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:long"/>
	</xsd:simpleType>
	<xsd:complexType name="stringSequence">
		<xsd:annotation>
			<xsd:documentation>
			Sequence of strings.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="name" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="ExtensionType">
		<xsd:sequence>
			<xsd:any namespace="##targetNamespace" processContents="lax" maxOccurs="unbounded"/>
			<!--xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/-->
		</xsd:sequence>
		<xsd:anyAttribute/>
	</xsd:complexType>
	<xsd:complexType name="ExosBase" abstract="true">
                     <xsd:annotation>
		     	<xsd:documentation> 
			Base object that is used in all get, set, create and delete 
			operations. This is an abstract object and can not be used by itself. All 
			concrete objects that support these operations are inherited from this base object.
			</xsd:documentation>
		     </xsd:annotation>
                     <xsd:sequence>
                          <xsd:element name="queryParameters" type="xsd:string" minOccurs="0" maxOccurs="1">
                             <xsd:annotation>
                                   <xsd:documentation>
					Client can request for inclusion or exclusion of only specific attributes in the EXOS base object using filter parameter. Irrespective of include or exclude parameters, API always returns index parameters. If include list contains only partial or full set of index parameters, return list contains only index parameters. Exclude list should not contain index parameters. If include list contains non index parameters, return list contains index plus requested non index parameters. Only first level attributes of EXOS base can be filtered out. Client can pass either include or exclude list but not both.

			Syntax of query string:
			        include: attr1, attr2, attr3 ..
			        exclude: attr1, attr2, attr3 ..
                        Incase of errors:
                                Parsing error: ignore and returns all attributes
                                Unknown attribute name passed : attribute ignored
                                Unknown query type : ignore and return all attributes

                                   ; Version : EXOS 12.3, Access : QUERY</xsd:documentation>
                             </xsd:annotation>
                          </xsd:element>
                     </xsd:sequence>
	            <xsd:attribute name="objectType" type="xsd:string" use="required"/>
    </xsd:complexType>
	<xsd:complexType name="ExosBaseClass" abstract="true"/>
	<xsd:simpleType name="AccessRight">
		<xsd:annotation>
			<xsd:documentation>
			Defines the various access privileges for a user on the switch.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="unknown"/>
			<xsd:enumeration value="readOnly"/>
			<xsd:enumeration value="readWrite"/>
		</xsd:restriction>
	</xsd:simpleType>
         <xsd:simpleType name="ipv4">
                                <xsd:annotation>
                                	<xsd:documentation>IPv4 Address that matches the following form: 132.174.95.5.  The range is [0-255].[0-255].[0-255].[0-255] </xsd:documentation>
                                </xsd:annotation>
                                <xsd:restriction base="xsd:string">
                                        <xsd:pattern value="((([1-9]?[0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([1-9]?[0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))"/>
                                </xsd:restriction>
        </xsd:simpleType>
        <xsd:simpleType name="ipv6">
                                <xsd:annotation>
                                	<xsd:documentation>IPv6 Address that matches the following form: 132.ab.95.f123.  The sange is [0-ffff]:[0-ffff]:[0-ffff]:[0-ffff]:[0-ffff]:[0-ffff]:[0-ffff]:[0-ffff] </xsd:documentation>
                                </xsd:annotation>
                                <xsd:restriction base="xsd:string">
                                        <xsd:pattern value="(([a-fA-F0-9]{1,4}:){7})([a-fA-F0-9]{1,4})"/>
                                </xsd:restriction>
        </xsd:simpleType>
        <xsd:simpleType name="IPAddress">
		<xsd:annotation>
			<xsd:documentation>IPv4 or IPV6 address</xsd:documentation>
		</xsd:annotation>
                <xsd:union memberTypes="ipv4 ipv6"/>
        </xsd:simpleType>
	<xsd:simpleType name="maskv6">
				<xsd:annotation>
					<xsd:documentation>IPv6 netmask which is of the range 0-128</xsd:documentation>
				</xsd:annotation>
				<xsd:restriction base="uint16_t">
					<xsd:minInclusive value="0"/>
					<xsd:maxInclusive value="128"/>
				</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="maskv4">
				<xsd:annotation>
					<xsd:documentation>IPv4 netmask which is of the range 0-32</xsd:documentation>
				</xsd:annotation>
				<xsd:restriction base="uint8_t">
					<xsd:minInclusive value="0"/>
					<xsd:maxInclusive value="32"/>
				</xsd:restriction>
	</xsd:simpleType>
        <xsd:simpleType name="Netmask">
		<xsd:annotation>
			<xsd:documentation>IPv4 or IPV6 netmask</xsd:documentation>
		</xsd:annotation>
                <xsd:union memberTypes="maskv6 maskv4"/>
        </xsd:simpleType>
	<xsd:simpleType name="editOperationType">
		<xsd:annotation>
			<xsd:documentation>
			(Not Used)
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="add"/>
			<xsd:enumeration value="unconfigure"/>
			<xsd:enumeration value="insert"/>
			<xsd:enumeration value="merge"/>
			<xsd:enumeration value="replace"/>
			<xsd:enumeration value="create"/>
			<xsd:enumeration value="delete"/>
		</xsd:restriction>
	</xsd:simpleType>
<!--	<xsd:simpleType name="SystemTypes">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="unknown"/>
			<xsd:enumeration value="blackDiamond6800"/>
			<xsd:enumeration value="blackDiamond6808"/>
			<xsd:enumeration value="summit7iSX"/>
			<xsd:enumeration value="blackDiamond6816"/>
			<xsd:enumeration value="summit24e3"/>
			<xsd:enumeration value="alpine3802"/>
			<xsd:enumeration value="blackDiamond6804"/>
			<xsd:enumeration value="bd10808"/>
			<xsd:enumeration value="bd8810"/>
			<xsd:enumeration value="summit400-24t"/>
			<xsd:enumeration value="summit400-24p"/>
			<xsd:enumeration value="summitX450-24x"/>
			<xsd:enumeration value="summitX450-24t"/>
			<xsd:enumeration value="summitX450a-24t"/>
			<xsd:enumeration value="summitX450e-24p"/>
			<xsd:enumeration value="bd8806"/>
			<xsd:enumeration value="summitX450a-48t"/>
			<xsd:enumeration value="bd12804"/>
			<xsd:enumeration value="summitX450e-48p"/>
			<xsd:enumeration value="summitX450a-24tDC"/>
			<xsd:enumeration value="summitX450a-24t"/>
			<xsd:enumeration value="summitX450a-24xDC"/>
			<xsd:enumeration value="summitX450a-24x"/>
			<xsd:enumeration value="summitX250-24t"/>
			<xsd:enumeration value="summitX250-24p"/>
			<xsd:enumeration value="summitX250-24x"/>
			<xsd:enumeration value="summitX250-48t"/>
			<xsd:enumeration value="summitX250-48p"/>
			<xsd:enumeration value="summitVer2Stack"/>
			<xsd:enumeration value="summitWM200"/>
			<xsd:enumeration value="summitWM2000"/>
			<xsd:enumeration value="summitxcm8806"/>
			<xsd:enumeration value="summitxcm8810"/>
			<xsd:enumeration value="na"/> 
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="CardTypes">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="unknown"/>
			<xsd:enumeration value="fe32"/>
			<xsd:enumeration value="g4x"/>
			<xsd:enumeration value="g6x"/>
			<xsd:enumeration value="msm"/>
			<xsd:enumeration value="f48ti"/>
			<xsd:enumeration value="g8xi"/>
			<xsd:enumeration value="g8ti"/>
			<xsd:enumeration value="g12sxi"/>
			<xsd:enumeration value="g12ti"/>
			<xsd:enumeration value="msm64i"/>
			<xsd:enumeration value="alpine3808"/>
			<xsd:enumeration value="alpine3804"/>
			<xsd:enumeration value="fm32t"/>
			<xsd:enumeration value="gm4x"/>
			<xsd:enumeration value="gm4sx"/>
			<xsd:enumeration value="gm4t"/>
			<xsd:enumeration value="wdm8"/>
			<xsd:enumeration value="fm24f"/>
			<xsd:enumeration value="fm24sf"/>
			<xsd:enumeration value="fm24te"/>
			<xsd:enumeration value="f96ti"/>
			<xsd:enumeration value="wdm4"/>
			<xsd:enumeration value="f32fi"/>
			<xsd:enumeration value="tenGx3"/>
			<xsd:enumeration value="tenGigLR"/>
			<xsd:enumeration value="g16x3"/>
			<xsd:enumeration value="g24t3"/>
			<xsd:enumeration value="gm16x3"/>
			<xsd:enumeration value="gm16t3"/>
			<xsd:enumeration value="fm16t3"/>
			<xsd:enumeration value="fm32p"/>
			<xsd:enumeration value="fm8v"/>
			<xsd:enumeration value="wm4t1"/>
			<xsd:enumeration value="wm4t3"/>
			<xsd:enumeration value="wm1t3"/>
			<xsd:enumeration value="wm4e1"/>
			<xsd:enumeration value="alpine3802"/>
			<xsd:enumeration value="p3c"/>
			<xsd:enumeration value="p12c"/>
			<xsd:enumeration value="arm"/>
			<xsd:enumeration value="mpls"/>
			<xsd:enumeration value="sma"/>
			<xsd:enumeration value="p48c"/>
			<xsd:enumeration value="a3c"/>
			<xsd:enumeration value="a12c"/>
			<xsd:enumeration value="pxm"/>
			<xsd:enumeration value="s300fixed"/>
			<xsd:enumeration value="msm3"/>
			<xsd:enumeration value="msm1"/>
			<xsd:enumeration value="msm1xl"/>
			<xsd:enumeration value="s300expansion"/>
			<xsd:enumeration value="g60t"/>
			<xsd:enumeration value="g60x"/>
			<xsd:enumeration value="teng6x"/>
			<xsd:enumeration value="msmG8x"/>
			<xsd:enumeration value="xcm88s1"/>
			<xsd:enumeration value="xcm8848t"/>
			<xsd:enumeration value="xcm88p"/>
			<xsd:enumeration value="xcm8824f"/>
			<xsd:enumeration value="xcm8808x"/>
			<xsd:enumeration value="xcm888f"/>
			<xsd:enumeration value="na"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="CardStates">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="unknown"/>
			<xsd:enumeration value="notPresent"/>
			<xsd:enumeration value="testing"/>
			<xsd:enumeration value="mismatch"/>
			<xsd:enumeration value="failed"/>
			<xsd:enumeration value="operational"/>
			<xsd:enumeration value="powerdown"/>
			<xsd:enumeration value="present"/>
			<xsd:enumeration value="poweron"/>
			<xsd:enumeration value="post"/>
			<xsd:enumeration value="downloading"/>
			<xsd:enumeration value="booting"/>
			<xsd:enumeration value="offline"/>
			<xsd:enumeration value="initializing"/>
			<xsd:enumeration value="invalid"/>
			<xsd:enumeration value="na"/>
		</xsd:restriction>
	</xsd:simpleType>-->
	<xsd:complexType name="ErrorObject">
		<xsd:annotation>
			<xsd:documentation>Reserved for future use.; Version : EXOS 12.0, Access : READ</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="errorCode" type="StringLen32" minOccurs="0"/>
			<xsd:element name="errorString" type="StringLen256" minOccurs="0"/>
			<xsd:element name="elementName" type="StringLen128" minOccurs="0"/>
			<xsd:element name="extension" type="ExtensionType" minOccurs="0"/>
			<xsd:any namespace="##other" processContents="lax" minOccurs="0"/>
		</xsd:sequence>
		<xsd:anyAttribute namespace="##any" processContents="lax"/>
	</xsd:complexType>
	<xsd:complexType name="ErrorObjectList">
		<xsd:annotation>
			<xsd:documentation>Reserved for future use.; Version : EXOS 12.0, Access : READ</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="errorObject" type="ErrorObject" minOccurs="0"/>
			<xsd:element name="extension" type="ExtensionType" minOccurs="0"/>
			<xsd:any namespace="##other" processContents="lax" minOccurs="0"/>
		</xsd:sequence>
		<xsd:anyAttribute namespace="##any" processContents="lax"/>
	</xsd:complexType>
	<xsd:element name="xxx" type="IPAddressNetMask"/>
	<xsd:complexType name="session">
		<xsd:annotation>
			<xsd:documentation>
			Defines the client application's credentials and parameters related
			to the webservices session, such as idle timeout and session id. Typically,
			the client will create this object by specifying values such as <code>appName</code>,
			<code>username</code>, <code>password</code>, <code>xmlApiVersion</code>,
			<code>timeout</code> and use it for the <code>openSession</code> request. Other
			values are filled in by the switch once a session is established.	
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="appName" type="StringLen32" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
					Name of the client application
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="username" type="StringLen32" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
					Username used to log in to the switch
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="password" type="StringLen32" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
					Password used to log in to the switch
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="xmlApiVersion" type="StringLen16" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
					Version of the API with which the client was written. This is the mechanism used by
					the switch to determine client capablities.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="sessionId" type="StringLen16" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
					Session id obtained after a successful <code>openSession</code> request.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="timeout" type="uint32_t" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
					Idle timeout value in seconds. The switch will close sessions that are idle for
					more than this period. The default timeout is 900 seconds. Client can choose to
					specify a different timeout value or use <code>keepAlive</code> requests to maintain
					a session during periods of inactivity.
					<br/>
					NOTE: If the usage pattern for the client has long periods of inactivity between calls,
					it may be more efficient to close the session and create a new one when needed.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="accessRight" type="AccessRight" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
					Access privileges for the username used to log in to the switch.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="extension" type="ExtensionType" minOccurs="0"/>
			<xsd:any namespace="##other" processContents="lax" minOccurs="0"/>
		</xsd:sequence>
		<xsd:attribute ref="operation"/>
		<xsd:anyAttribute namespace="##any" processContents="lax"/>
	</xsd:complexType>
	<xsd:element name="hdr" type="ClientHeader">
		<xsd:annotation>
			<xsd:documentation>
			(Not Used)
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="ClientHeader">
		<xsd:annotation>
			<xsd:documentation>
			The header is used to send the session id obtained from an <code>openSession</code> operation. 
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="reqId" type="uint32_t" minOccurs="0">
			<xsd:annotation>
				<xsd:documentation>
				The request id can be used by clients to match the response with the request for each 
				operation. It can be set to 0 if the matching is already being taken care by client technologies. 
				For example, if the client webservice call is not executed asynchronously, the client 
				waits till a response is returned. In this case, the client will not need an id to match 
				the request with the response.
				</xsd:documentation>
			</xsd:annotation>
			</xsd:element>
			<xsd:element name="sessionId" type="StringLen32" minOccurs="0">
			<xsd:annotation>
				<xsd:documentation>
				The session id obtained from a <code>openSession</code> operation. This is used by the 
				switch to verify if the client has been authenticated. If the session id does not match 
				any of the valid sessions on the switch, the operation will fail. Note that the session 
				can also become invalid if the session is timed out due to inactivity.
				</xsd:documentation>
			</xsd:annotation>
			</xsd:element>
			<xsd:element name="extension" type="ExtensionType" minOccurs="0"/>
			<xsd:any namespace="##other" processContents="lax" minOccurs="0"/>
		</xsd:sequence>
		<!--<xsd:attribute ref="operation"/>-->
		<xsd:anyAttribute namespace="##any" processContents="lax"/>
	</xsd:complexType>
	<xsd:complexType name="IPAddressNetMask">
		<xsd:annotation>
			<xsd:documentation>
			IPv4 or IPv6 address and netmask.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="ipAddress" type="IPAddress" minOccurs="0"/>
			<xsd:element name="netmask" type="Netmask" minOccurs="0"/>
			<xsd:element name="extension" type="ExtensionType" minOccurs="0"/>
			<xsd:any namespace="##other" processContents="lax" minOccurs="0"/>
		</xsd:sequence>
		<xsd:attribute ref="operation"/>
		<xsd:anyAttribute namespace="##any" processContents="lax"/>
	</xsd:complexType>
        <xsd:complexType name="IPV6Address">
		<xsd:annotation>
			<xsd:documentation>
			Sequence of IPv6 addresses.
			</xsd:documentation>
		</xsd:annotation>
                <xsd:sequence>
                        <xsd:element name="ipv6Address" type="StringLen256" minOccurs="0"/>
                </xsd:sequence>
        </xsd:complexType>
	<xsd:attribute name="operation" type="editOperationType" default="merge"/>
	<xsd:element name="getAllSessionsRequest">
		<xsd:annotation>
			<xsd:documentation>
			(Not Used)
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType/>
	</xsd:element>
	<xsd:element name="getAllSessionsReply">
		<xsd:annotation>
			<xsd:documentation>
			(Not Used)
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="session" type="session" minOccurs="0" maxOccurs="32"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="openSessionRequest">
		<xsd:annotation>
			<xsd:documentation>
			Defines the message used for <code>openSession</code> operations.
			The session object is used to specify the client credentials and session-related parameters.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="session" type="session" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
					The session object is used to specify the client credentials and session-related parameters.
					</xsd:documentation>
				</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="openSessionReply">
		<xsd:annotation>
			<xsd:documentation>
			Defines the reply from an <code>openSession</code> operation.
			The session object used for the <code>openSession</code> operation is returned with properties, 
			such as session id and access rights, filled in.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="session" type="session" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
					The session object used for the <code>openSession</code> operation is returned with 
					properties, such as session id and access rights, filled in.
					</xsd:documentation>
				</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="closeSessionRequest">
		<xsd:annotation>
			<xsd:documentation>
			Defines the message for <code>closeSession</code> operations.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="sessionId" type="StringLen32">
				<xsd:annotation>
					<xsd:documentation>
					The session id refers to the session that is to be closed. This session id is 
					returned in the <code>session</code> object as part of the <code>openSessionReply</code>. 
					</xsd:documentation>
				</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="closeSessionReply">
		<xsd:complexType/>
	</xsd:element>
	 <xsd:element name="exception">
                <xsd:complexType>
                        <xsd:sequence>
                                <xsd:element name="hdr" type="ClientHeader"/>
                                <xsd:element name="extension" type="ExtensionType" minOccurs="0"/>
                                <xsd:any namespace="##other" processContents="lax" minOccurs="0"/>
                        </xsd:sequence>
                        <xsd:attribute ref="operation"/>
                        <xsd:anyAttribute namespace="##any" processContents="lax"/>
                </xsd:complexType>
        </xsd:element>
	
	<xsd:element name="keepAliveRequest">
		<xsd:annotation>
			<xsd:documentation>
			Defines the message used for <code>keepAlive</code> operations.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="hdr" type="ClientHeader"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="keepAliveReply">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="lastChangeTime"  type="xsd:dateTime" minOccurs="0"/>
				<xsd:element name="hdr" type="ClientHeader"/>
				<xsd:element name="extension" type="ExtensionType" minOccurs="0"/>
				<xsd:any namespace="##other" processContents="lax" minOccurs="0"/>
			</xsd:sequence>
		<xsd:attribute ref="operation"/>
		<xsd:anyAttribute namespace="##any" processContents="lax"/>
	</xsd:complexType>
	</xsd:element>
</xsd:schema>
